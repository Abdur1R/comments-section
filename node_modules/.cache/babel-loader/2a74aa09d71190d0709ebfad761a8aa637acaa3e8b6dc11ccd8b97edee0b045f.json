{"ast":null,"code":"import{useState,useEffect}from\"react\";import CommentForm from\"./CommentForm\";import Comment from\"./Comment\";// import {\n//     getComments as getCommentsApi,\n//     createComment as createCommentApi,\n//     updateComment as updateCommentApi,\n//     deleteComment as deleteCommentApi,\n// } from \"./api\";\nimport React from\"react\";import{Fragment as _Fragment,jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Comments=_ref=>{let{commentsUrl,currentUserId,onCommentBodyClick,jsonKey,questionId,questionText}=_ref;return/*#__PURE__*/_jsx(_Fragment,{children:\"Hi, I am comments section (still under development)\"});const[backendComments,setBackendComments]=useState([]);const[activeComment,setActiveComment]=useState(null);const rootComments=backendComments.filter(backendComment=>backendComment.parentId===null);console.log('backendComments',backendComments);console.log('rootComments',rootComments);const getReplies=commentId=>backendComments.filter(backendComment=>backendComment.parentId===commentId).sort((a,b)=>new Date(a.createdAt).getTime()-new Date(b.createdAt).getTime());const addComment=(text,parentId)=>{console.log('jsonKey, questionId in comments page',jsonKey,questionId);// createCommentApi(text, parentId, jsonKey, questionId).then((comment: any) => {\n// setBackendComments([comment, ...backendComments]);\nsetBackendComments([{},...backendComments]);setActiveComment(null);// });\n};const updateComment=(text,commentId)=>{// const html = parser.parseFromString(htmlString, 'text/html');\n// updateCommentApi(text).then(() => {\nconst updatedBackendComments=backendComments.map(backendComment=>{if(backendComment.id===commentId){return{...backendComment,body:text};}return backendComment;});setBackendComments(updatedBackendComments);setActiveComment(null);// });\n};const deleteComment=commentId=>{if(window.confirm(\"Are you sure you want to remove comment?\")){// deleteCommentApi().then(() => {\nconst updatedBackendComments=backendComments.filter(backendComment=>backendComment.id!==commentId);setBackendComments(updatedBackendComments);// });\n}};useEffect(()=>{// getCommentsApi().then((data) => {\n// setBackendComments(data);\nsetBackendComments([]);// });\n},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"comments\",children:[/*#__PURE__*/_jsx(CommentForm,{parentForm:true,submitLabel:\"POST\",questionText:questionText,handleSubmit:addComment}),/*#__PURE__*/_jsx(\"div\",{className:\"comments-container\",children:rootComments.map(rootComment=>/*#__PURE__*/_jsx(Comment,{comment:rootComment,replies:getReplies(rootComment.id),activeComment:activeComment,setActiveComment:setActiveComment,addComment:addComment,deleteComment:deleteComment,updateComment:updateComment,currentUserId:currentUserId,onCommentBodyClick:onCommentBodyClick,reply:false},rootComment.id))})]});};export default Comments;","map":{"version":3,"names":["useState","useEffect","CommentForm","Comment","React","Fragment","_Fragment","jsx","_jsx","jsxs","_jsxs","Comments","_ref","commentsUrl","currentUserId","onCommentBodyClick","jsonKey","questionId","questionText","children","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","console","log","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","updateComment","updatedBackendComments","map","id","body","deleteComment","window","confirm","className","parentForm","submitLabel","handleSubmit","rootComment","comment","replies","reply"],"sources":["C:/Projects/comments-section/src/Comments.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\n// import {\r\n//     getComments as getCommentsApi,\r\n//     createComment as createCommentApi,\r\n//     updateComment as updateCommentApi,\r\n//     deleteComment as deleteCommentApi,\r\n// } from \"./api\";\r\nimport React from \"react\";\r\n\r\nconst Comments = ({ commentsUrl, currentUserId, onCommentBodyClick, jsonKey, questionId, questionText }: { commentsUrl?: string, currentUserId?: string, onCommentBodyClick?: ({ jsonKey, questionId }: { jsonKey?: string, questionId?: string }) => void, jsonKey?: string, questionId?: string, questionText?: string }) => {\r\n    return (<>Hi, I am comments section (still under development)</>)\r\n    const [backendComments, setBackendComments] = useState<any>([]);\r\n    const [activeComment, setActiveComment] = useState(null);\r\n    const rootComments = backendComments.filter(\r\n        (backendComment: any) => backendComment.parentId === null\r\n    );\r\n    console.log('backendComments', backendComments);\r\n    console.log('rootComments', rootComments);\r\n\r\n    const getReplies = (commentId: string) =>\r\n        backendComments\r\n            .filter((backendComment: any) => backendComment.parentId === commentId)\r\n            .sort(\r\n                (a: any, b: any) =>\r\n                    new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n            );\r\n    const addComment = (text: string, parentId: any) => {\r\n        console.log('jsonKey, questionId in comments page', jsonKey, questionId);\r\n        // createCommentApi(text, parentId, jsonKey, questionId).then((comment: any) => {\r\n        // setBackendComments([comment, ...backendComments]);\r\n        setBackendComments([{}, ...backendComments]);\r\n        setActiveComment(null);\r\n        // });\r\n    };\r\n\r\n    const updateComment = (text: string, commentId: string) => {\r\n        // const html = parser.parseFromString(htmlString, 'text/html');\r\n        // updateCommentApi(text).then(() => {\r\n        const updatedBackendComments = backendComments.map((backendComment: any) => {\r\n            if (backendComment.id === commentId) {\r\n                return { ...backendComment, body: text };\r\n            }\r\n            return backendComment;\r\n        });\r\n        setBackendComments(updatedBackendComments);\r\n        setActiveComment(null);\r\n        // });\r\n    };\r\n    const deleteComment = (commentId: any) => {\r\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n            // deleteCommentApi().then(() => {\r\n            const updatedBackendComments = backendComments.filter(\r\n                (backendComment: any) => backendComment.id !== commentId\r\n            );\r\n            setBackendComments(updatedBackendComments);\r\n            // });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // getCommentsApi().then((data) => {\r\n        // setBackendComments(data);\r\n        setBackendComments([]);\r\n        // });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"comments\">\r\n            <CommentForm parentForm={true} submitLabel=\"POST\" questionText={questionText} handleSubmit={addComment} />\r\n            <div className=\"comments-container\">\r\n                {rootComments.map((rootComment: any) => (\r\n                    <Comment\r\n                        key={rootComment.id}\r\n                        comment={rootComment}\r\n                        replies={getReplies(rootComment.id)}\r\n                        activeComment={activeComment}\r\n                        setActiveComment={setActiveComment}\r\n                        addComment={addComment}\r\n                        deleteComment={deleteComment}\r\n                        updateComment={updateComment}\r\n                        currentUserId={currentUserId}\r\n                        onCommentBodyClick={onCommentBodyClick}\r\n                        reply={false}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}