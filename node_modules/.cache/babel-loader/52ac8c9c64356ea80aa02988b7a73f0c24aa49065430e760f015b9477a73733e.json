{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\comments-section\\\\src\\\\Comments.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\n// import {\n//     getComments as getCommentsApi,\n//     createComment as createCommentApi,\n//     updateComment as updateCommentApi,\n//     deleteComment as deleteCommentApi,\n// } from \"./api\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = ({\n  commentsUrl,\n  currentUserId,\n  onCommentBodyClick,\n  jsonKey,\n  questionId,\n  questionText\n}) => {\n  _s();\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n  console.log('backendComments', backendComments);\n  console.log('rootComments', rootComments);\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  const addComment = (text, parentId) => {\n    console.log('jsonKey, questionId in comments page', jsonKey, questionId);\n    // createCommentApi(text, parentId, jsonKey, questionId).then((comment: any) => {\n    // setBackendComments([comment, ...backendComments]);\n    setBackendComments([{}, ...backendComments]);\n    setActiveComment(null);\n    // });\n  };\n  const updateComment = (text, commentId) => {\n    // const html = parser.parseFromString(htmlString, 'text/html');\n    // updateCommentApi(text).then(() => {\n    const updatedBackendComments = backendComments.map(backendComment => {\n      if (backendComment.id === commentId) {\n        return {\n          ...backendComment,\n          body: text\n        };\n      }\n      return backendComment;\n    });\n    setBackendComments(updatedBackendComments);\n    setActiveComment(null);\n    // });\n  };\n  const deleteComment = commentId => {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      // deleteCommentApi().then(() => {\n      const updatedBackendComments = backendComments.filter(backendComment => backendComment.id !== commentId);\n      setBackendComments(updatedBackendComments);\n      // });\n    }\n  };\n  useEffect(() => {\n    // getCommentsApi().then((data) => {\n    // setBackendComments(data);\n    setBackendComments([]);\n    // });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n      parentForm: true,\n      submitLabel: \"POST\",\n      questionText: questionText,\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUserId: currentUserId,\n        onCommentBodyClick: onCommentBodyClick,\n        reply: false\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","CommentForm","Comment","React","jsxDEV","_jsxDEV","Comments","commentsUrl","currentUserId","onCommentBodyClick","jsonKey","questionId","questionText","_s","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","console","log","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","updateComment","updatedBackendComments","map","id","body","deleteComment","window","confirm","className","children","parentForm","submitLabel","handleSubmit","fileName","_jsxFileName","lineNumber","columnNumber","rootComment","comment","replies","reply","_c","$RefreshReg$"],"sources":["C:/Projects/comments-section/src/Comments.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\n// import {\r\n//     getComments as getCommentsApi,\r\n//     createComment as createCommentApi,\r\n//     updateComment as updateCommentApi,\r\n//     deleteComment as deleteCommentApi,\r\n// } from \"./api\";\r\nimport React from \"react\";\r\n\r\nconst Comments = ({ commentsUrl, currentUserId, onCommentBodyClick, jsonKey, questionId, questionText }: { commentsUrl?: string, currentUserId?: string, onCommentBodyClick?: ({ jsonKey, questionId }: { jsonKey?: string, questionId?: string }) => void, jsonKey?: string, questionId?: string, questionText?: string }) => {\r\n    const [backendComments, setBackendComments] = useState<any>([]);\r\n    const [activeComment, setActiveComment] = useState(null);\r\n    const rootComments = backendComments.filter(\r\n        (backendComment: any) => backendComment.parentId === null\r\n    );\r\n    console.log('backendComments', backendComments);\r\n    console.log('rootComments', rootComments);\r\n\r\n    const getReplies = (commentId: string) =>\r\n        backendComments\r\n            .filter((backendComment: any) => backendComment.parentId === commentId)\r\n            .sort(\r\n                (a: any, b: any) =>\r\n                    new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n            );\r\n    const addComment = (text: string, parentId: any) => {\r\n        console.log('jsonKey, questionId in comments page', jsonKey, questionId);\r\n        // createCommentApi(text, parentId, jsonKey, questionId).then((comment: any) => {\r\n        // setBackendComments([comment, ...backendComments]);\r\n        setBackendComments([{}, ...backendComments]);\r\n        setActiveComment(null);\r\n        // });\r\n    };\r\n\r\n    const updateComment = (text: string, commentId: string) => {\r\n        // const html = parser.parseFromString(htmlString, 'text/html');\r\n        // updateCommentApi(text).then(() => {\r\n        const updatedBackendComments = backendComments.map((backendComment: any) => {\r\n            if (backendComment.id === commentId) {\r\n                return { ...backendComment, body: text };\r\n            }\r\n            return backendComment;\r\n        });\r\n        setBackendComments(updatedBackendComments);\r\n        setActiveComment(null);\r\n        // });\r\n    };\r\n    const deleteComment = (commentId: any) => {\r\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n            // deleteCommentApi().then(() => {\r\n            const updatedBackendComments = backendComments.filter(\r\n                (backendComment: any) => backendComment.id !== commentId\r\n            );\r\n            setBackendComments(updatedBackendComments);\r\n            // });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // getCommentsApi().then((data) => {\r\n        // setBackendComments(data);\r\n        setBackendComments([]);\r\n        // });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"comments\">\r\n            <CommentForm parentForm={true} submitLabel=\"POST\" questionText={questionText} handleSubmit={addComment} />\r\n            <div className=\"comments-container\">\r\n                {rootComments.map((rootComment: any) => (\r\n                    <Comment\r\n                        key={rootComment.id}\r\n                        comment={rootComment}\r\n                        replies={getReplies(rootComment.id)}\r\n                        activeComment={activeComment}\r\n                        setActiveComment={setActiveComment}\r\n                        addComment={addComment}\r\n                        deleteComment={deleteComment}\r\n                        updateComment={updateComment}\r\n                        currentUserId={currentUserId}\r\n                        onCommentBodyClick={onCommentBodyClick}\r\n                        reply={false}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC,aAAa;EAAEC,kBAAkB;EAAEC,OAAO;EAAEC,UAAU;EAAEC;AAAgO,CAAC,KAAK;EAAAC,EAAA;EAC3T,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAM,EAAE,CAAC;EAC/D,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAMmB,YAAY,GAAGJ,eAAe,CAACK,MAAM,CACtCC,cAAmB,IAAKA,cAAc,CAACC,QAAQ,KAAK,IACzD,CAAC;EACDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAET,eAAe,CAAC;EAC/CQ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,YAAY,CAAC;EAEzC,MAAMM,UAAU,GAAIC,SAAiB,IACjCX,eAAe,CACVK,MAAM,CAAEC,cAAmB,IAAKA,cAAc,CAACC,QAAQ,KAAKI,SAAS,CAAC,CACtEC,IAAI,CACD,CAACC,CAAM,EAAEC,CAAM,KACX,IAAIC,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,OAAO,CAAC,CACxE,CAAC;EACT,MAAMC,UAAU,GAAGA,CAACC,IAAY,EAAEZ,QAAa,KAAK;IAChDC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEb,OAAO,EAAEC,UAAU,CAAC;IACxE;IACA;IACAI,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,GAAGD,eAAe,CAAC,CAAC;IAC5CG,gBAAgB,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC;EAED,MAAMiB,aAAa,GAAGA,CAACD,IAAY,EAAER,SAAiB,KAAK;IACvD;IACA;IACA,MAAMU,sBAAsB,GAAGrB,eAAe,CAACsB,GAAG,CAAEhB,cAAmB,IAAK;MACxE,IAAIA,cAAc,CAACiB,EAAE,KAAKZ,SAAS,EAAE;QACjC,OAAO;UAAE,GAAGL,cAAc;UAAEkB,IAAI,EAAEL;QAAK,CAAC;MAC5C;MACA,OAAOb,cAAc;IACzB,CAAC,CAAC;IACFL,kBAAkB,CAACoB,sBAAsB,CAAC;IAC1ClB,gBAAgB,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC;EACD,MAAMsB,aAAa,GAAId,SAAc,IAAK;IACtC,IAAIe,MAAM,CAACC,OAAO,CAAC,0CAA0C,CAAC,EAAE;MAC5D;MACA,MAAMN,sBAAsB,GAAGrB,eAAe,CAACK,MAAM,CAChDC,cAAmB,IAAKA,cAAc,CAACiB,EAAE,KAAKZ,SACnD,CAAC;MACDV,kBAAkB,CAACoB,sBAAsB,CAAC;MAC1C;IACJ;EACJ,CAAC;EAEDnC,SAAS,CAAC,MAAM;IACZ;IACA;IACAe,kBAAkB,CAAC,EAAE,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIV,OAAA;IAAKqC,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrBtC,OAAA,CAACJ,WAAW;MAAC2C,UAAU,EAAE,IAAK;MAACC,WAAW,EAAC,MAAM;MAACjC,YAAY,EAAEA,YAAa;MAACkC,YAAY,EAAEd;IAAW;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1G7C,OAAA;MAAKqC,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAC9BzB,YAAY,CAACkB,GAAG,CAAEe,WAAgB,iBAC/B9C,OAAA,CAACH,OAAO;QAEJkD,OAAO,EAAED,WAAY;QACrBE,OAAO,EAAE7B,UAAU,CAAC2B,WAAW,CAACd,EAAE,CAAE;QACpCrB,aAAa,EAAEA,aAAc;QAC7BC,gBAAgB,EAAEA,gBAAiB;QACnCe,UAAU,EAAEA,UAAW;QACvBO,aAAa,EAAEA,aAAc;QAC7BL,aAAa,EAAEA,aAAc;QAC7B1B,aAAa,EAAEA,aAAc;QAC7BC,kBAAkB,EAAEA,kBAAmB;QACvC6C,KAAK,EAAE;MAAM,GAVRH,WAAW,CAACd,EAAE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWtB,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACrC,EAAA,CA9EIP,QAAQ;AAAAiD,EAAA,GAARjD,QAAQ;AAgFd,eAAeA,QAAQ;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}