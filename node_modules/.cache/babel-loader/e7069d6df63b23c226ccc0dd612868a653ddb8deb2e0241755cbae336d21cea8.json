{"ast":null,"code":"import{useState}from\"react\";// import {\n//     getComments as getCommentsApi,\n//     createComment as createCommentApi,\n//     updateComment as updateCommentApi,\n//     deleteComment as deleteCommentApi,\n// } from \"./api\";\nimport React from\"react\";// const Comments = ({ commentsUrl, currentUserId, onCommentBodyClick, jsonKey, questionId, questionText }: { commentsUrl?: string, currentUserId?: string, onCommentBodyClick?: ({ jsonKey, questionId }: { jsonKey?: string, questionId?: string }) => void, jsonKey?: string, questionId?: string, questionText?: string }) => {\nimport{Fragment as _Fragment,jsx as _jsx}from\"react/jsx-runtime\";const Comments=()=>{const[backendComments,setBackendComments]=useState([]);const[activeComment,setActiveComment]=useState(null);const rootComments=backendComments.filter(backendComment=>backendComment.parentId===null);return/*#__PURE__*/_jsx(_Fragment,{});// console.log('backendComments', backendComments);\n// console.log('rootComments', rootComments);\n// const getReplies = (commentId: string) =>\n//     backendComments\n//         .filter((backendComment: any) => backendComment.parentId === commentId)\n//         .sort(\n//             (a: any, b: any) =>\n//                 new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n//         );\n// const addComment = (text: string, parentId: any) => {\n//     console.log('jsonKey, questionId in comments page', jsonKey, questionId);\n//     // createCommentApi(text, parentId, jsonKey, questionId).then((comment: any) => {\n//     // setBackendComments([comment, ...backendComments]);\n//     setBackendComments([{}, ...backendComments]);\n//     setActiveComment(null);\n//     // });\n// };\n// const updateComment = (text: string, commentId: string) => {\n//     // const html = parser.parseFromString(htmlString, 'text/html');\n//     // updateCommentApi(text).then(() => {\n//     const updatedBackendComments = backendComments.map((backendComment: any) => {\n//         if (backendComment.id === commentId) {\n//             return { ...backendComment, body: text };\n//         }\n//         return backendComment;\n//     });\n//     setBackendComments(updatedBackendComments);\n//     setActiveComment(null);\n//     // });\n// };\n// const deleteComment = (commentId: any) => {\n//     if (window.confirm(\"Are you sure you want to remove comment?\")) {\n//         // deleteCommentApi().then(() => {\n//         const updatedBackendComments = backendComments.filter(\n//             (backendComment: any) => backendComment.id !== commentId\n//         );\n//         setBackendComments(updatedBackendComments);\n//         // });\n//     }\n// };\n// useEffect(() => {\n//     // getCommentsApi().then((data) => {\n//     // setBackendComments(data);\n//     setBackendComments([]);\n//     // });\n// }, []);\n// return (\n//     <div className=\"comments\">\n//         <CommentForm parentForm={true} submitLabel=\"POST\" questionText={questionText} handleSubmit={addComment} />\n//         <div className=\"comments-container\">\n//             {rootComments.map((rootComment: any) => (\n//                 <Comment\n//                     key={rootComment.id}\n//                     comment={rootComment}\n//                     replies={getReplies(rootComment.id)}\n//                     activeComment={activeComment}\n//                     setActiveComment={setActiveComment}\n//                     addComment={addComment}\n//                     deleteComment={deleteComment}\n//                     updateComment={updateComment}\n//                     currentUserId={currentUserId}\n//                     onCommentBodyClick={onCommentBodyClick}\n//                     reply={false}\n//                 />\n//             ))}\n//         </div>\n//     </div>\n// );\n};export default Comments;","map":{"version":3,"names":["useState","React","Fragment","_Fragment","jsx","_jsx","Comments","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId"],"sources":["C:/Projects/comment-section/src/Comments.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\n// import {\r\n//     getComments as getCommentsApi,\r\n//     createComment as createCommentApi,\r\n//     updateComment as updateCommentApi,\r\n//     deleteComment as deleteCommentApi,\r\n// } from \"./api\";\r\nimport React from \"react\";\r\n\r\n// const Comments = ({ commentsUrl, currentUserId, onCommentBodyClick, jsonKey, questionId, questionText }: { commentsUrl?: string, currentUserId?: string, onCommentBodyClick?: ({ jsonKey, questionId }: { jsonKey?: string, questionId?: string }) => void, jsonKey?: string, questionId?: string, questionText?: string }) => {\r\nconst Comments = () => {\r\n    const [backendComments, setBackendComments] = useState<any>([]);\r\n    const [activeComment, setActiveComment] = useState(null);\r\n    const rootComments = backendComments.filter(\r\n        (backendComment: any) => backendComment.parentId === null\r\n    );\r\n    return (<></>);\r\n    // console.log('backendComments', backendComments);\r\n    // console.log('rootComments', rootComments);\r\n\r\n    // const getReplies = (commentId: string) =>\r\n    //     backendComments\r\n    //         .filter((backendComment: any) => backendComment.parentId === commentId)\r\n    //         .sort(\r\n    //             (a: any, b: any) =>\r\n    //                 new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n    //         );\r\n    // const addComment = (text: string, parentId: any) => {\r\n    //     console.log('jsonKey, questionId in comments page', jsonKey, questionId);\r\n    //     // createCommentApi(text, parentId, jsonKey, questionId).then((comment: any) => {\r\n    //     // setBackendComments([comment, ...backendComments]);\r\n    //     setBackendComments([{}, ...backendComments]);\r\n    //     setActiveComment(null);\r\n    //     // });\r\n    // };\r\n\r\n    // const updateComment = (text: string, commentId: string) => {\r\n    //     // const html = parser.parseFromString(htmlString, 'text/html');\r\n    //     // updateCommentApi(text).then(() => {\r\n    //     const updatedBackendComments = backendComments.map((backendComment: any) => {\r\n    //         if (backendComment.id === commentId) {\r\n    //             return { ...backendComment, body: text };\r\n    //         }\r\n    //         return backendComment;\r\n    //     });\r\n    //     setBackendComments(updatedBackendComments);\r\n    //     setActiveComment(null);\r\n    //     // });\r\n    // };\r\n    // const deleteComment = (commentId: any) => {\r\n    //     if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n    //         // deleteCommentApi().then(() => {\r\n    //         const updatedBackendComments = backendComments.filter(\r\n    //             (backendComment: any) => backendComment.id !== commentId\r\n    //         );\r\n    //         setBackendComments(updatedBackendComments);\r\n    //         // });\r\n    //     }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     // getCommentsApi().then((data) => {\r\n    //     // setBackendComments(data);\r\n    //     setBackendComments([]);\r\n    //     // });\r\n    // }, []);\r\n\r\n    // return (\r\n    //     <div className=\"comments\">\r\n    //         <CommentForm parentForm={true} submitLabel=\"POST\" questionText={questionText} handleSubmit={addComment} />\r\n    //         <div className=\"comments-container\">\r\n    //             {rootComments.map((rootComment: any) => (\r\n    //                 <Comment\r\n    //                     key={rootComment.id}\r\n    //                     comment={rootComment}\r\n    //                     replies={getReplies(rootComment.id)}\r\n    //                     activeComment={activeComment}\r\n    //                     setActiveComment={setActiveComment}\r\n    //                     addComment={addComment}\r\n    //                     deleteComment={deleteComment}\r\n    //                     updateComment={updateComment}\r\n    //                     currentUserId={currentUserId}\r\n    //                     onCommentBodyClick={onCommentBodyClick}\r\n    //                     reply={false}\r\n    //                 />\r\n    //             ))}\r\n    //         </div>\r\n    //     </div>\r\n    // );\r\n};\r\n\r\nexport default Comments;"],"mappings":"AAAA,OAASA,QAAQ,KAAmB,OAAO,CAG3C;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AAAA,OAAAC,QAAA,IAAAC,SAAA,CAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACnB,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGR,QAAQ,CAAM,EAAE,CAAC,CAC/D,KAAM,CAACS,aAAa,CAAEC,gBAAgB,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CACxD,KAAM,CAAAW,YAAY,CAAGJ,eAAe,CAACK,MAAM,CACtCC,cAAmB,EAAKA,cAAc,CAACC,QAAQ,GAAK,IACzD,CAAC,CACD,mBAAQT,IAAA,CAAAF,SAAA,GAAI,CAAC,CACb;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ,CAAC,CAED,cAAe,CAAAG,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}